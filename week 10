#include <bits/stdc++.h> using namespace std;
void printMaxActivities(int s[], int f[], int n)
{
vector<int>ans; int i, j;
int c = 1; i = 1;
ans.push_back(i); for (j = 1; j < n; j++){ if (s[j] >= f[i]){ ans.push_back(j+1); c++;
i = j;
} }
cout<<endl<<"No. of non-conflicting activities:"<<c<<endl; cout<<"List of selected activities:";
for(i=0;i<ans.size();i++) cout<<ans[i]<<" ";
}
int main()
{
int n; cin>>n;
int s[n],f[n]; for(int i=0;i<n;i++) cin>>s[i];
for(int i=0;i<n;i++) cin>>f[i]; printMaxActivities(s, f, n);
return 0;
}







#include<bits/stdc++.h> using namespace std;
bool compare(pair<int,int>a,pair<int,int>b){ return a.first > b.first;
}
int main(){ int n; cin>>n;  int p[n];
int d[n];
for(int i=0;i<n;i++) cin>>p[i];
for(int i=0;i<n;i++) cin>>d[i]; vector<pair<int,int> > jobs; int profit,deadline;
for(int i=0;i<n;i++){ jobs.push_back(make_pair(p[i],d[i]));
}
sort(jobs.begin(),jobs.end(),compare); int maxEndTime = 0;
for(int i=0;i<n;i++){ if(jobs[i].second > maxEndTime) maxEndTime = jobs[i].second;
}
vector<int> ans;
int fill[maxEndTime];
int count = 0, maxProfit = 0; for(int i=0;i<n;i++)	fill[i] = -1; for(int i=0;i<n;i++){
int j = jobs[i].second - 1; while(j>=0 && fill[i]!=-1) j--; if(j>=0 && fill[j]==-1){
fill[j] = i; ans.push_back(i); count++;
maxProfit = maxProfit + jobs[i].first;
}
}
cout<<"Maximum no of tasks : "<<count<<endl; cout<<"Selected task numbers : ";
for(int i=0;i<ans.size();i++) cout<<ans[i]<<" ";
return 0;
}








#include <bits/stdc++.h> using namespace std;
void findMajority(int arr[], int n)
{
int maxCount = 0; int index = -1;
for (int i = 0; i < n; i++) { int count = 0;
for (int j = 0; j < n; j++) { if (arr[i] == arr[j]) count++;
}
if (count > maxCount) { maxCount = count; index = i;
}
}
if (maxCount > n / 2) cout << "Yes" ;
else
cout << "No" ;
}
double findMedian(int a[], int n)
{
sort(a, a + n); if (n % 2 != 0)
return (double)a[n / 2];
return (double)(a[(n - 1) / 2] + a[n / 2]) / 2.0;
}
int main()
{
int n; cin>>n; int arr[n];
for(int i=0;i<n;i++) cin>>arr[i]; findMajority(arr,n);
cout<<endl<<findMedian(arr, n); return 0;
}
