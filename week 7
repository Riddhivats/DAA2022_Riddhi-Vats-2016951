#include<bits/stdc++.h> 
using namespace std;
void path(vector<int>& parent, int j)
{ 
if (parent[j] == - 1){
cout<<j; return;
}
printf("%d ", j); 
path(parent, parent[j]);
}
int main()
{
int n,e;
cin>>n>>e;
vector<vector<pair<int,int>>> graph(n+1);
for(int i=0;i<e;i++)
{
int s,d,w; cin>>s>>d>>w;
graph[s].push_back({d,w});
graph[d].push_back({s,w});
}
vector<int> dist(n+1,INT_MAX); 
set<pair<int,int>> s;
int source; cin>>source;
dist[source]=0; 
s.insert({0,source});
vector<int> parent(n+1, -1); 
while(!s.empty())
{
auto x = *(s.begin());
s.erase(x);
for(auto it: graph[x.second])
{ 
if(dist[it.first] > dist[x.second]+it.second)
{ s.erase({dist[it.first],it.first});
dist[it.first] = dist[x.second]+it.second;
s.insert({dist[it.first],it.first}); 
parent[it.first]= x.second;
 
}
}
}
for(int i=1;i< n+1;i++)
{
path(parent, i);
cout<<" : "<<dist[i]<<endl;
}
return 0;
}












#include<bits/stdc++.h> 
using namespace std;
void path(vector<int>& parent, int j){ if (parent[j] == - 1){
cout<<j; return;
}
printf("%d ", j); path(parent, parent[j]);
}
int main()
{
int n,e; cin>>n>>e;
vector<vector<int>> edges; for(int i=0;i<e;i++){
int u,v,w; cin>>u>>v>>w;
edges.push_back({u,v,w});
edges.push_back({v,u,w});
}
vector<int> parent(n+1,-1); vector<int> dist(n+1, 1e9); int src;
cin>>src; dist[src] = 0;
bool negative_cycle; for(int i=1;i<n;i++)
{
negative_cycle = false; for(auto it: edges){
int u,v,w;
u = it[0];
v = it[1];
w = it[2];
if(dist[v] > dist[u]+w){ dist[v] = dist[u]+w; parent[v] = u; negative_cycle = true;
}
}
}
if(negative_cycle) cout<<"negative cycle present"; else{
for(int i=1;i< n+1;i++){ path(parent, i);
 
cout<<" : "<<dist[i]<<endl;
}
}
return 0;
}










#include<bits/stdc++.h>
using namespace std; 
#define V 100
#define INF INT_MAX int arr[100][100];
int shortestpath(int arr[][V],int u,int v,int k, int n)
{
if(k==0 && u==v) return 0;
if(k==1 && arr[u][v] != INF) return arr[u][v]; if(k<=0)
return INF; int res = INF;
for(int i=0;i<n;i++)
{
if(arr[u][i] != INF && u!=i && v!=i)
{
int rec_res = shortestpath(arr, i,v,k-1, n); if(rec_res != INF)
res = min(res, arr[u][i]+rec_res);
} }
return res;
}
int main(){ int n; cin>>n; int a;
for(int i=0;i<n;i++){ for(int j=0;j<n;j++){ cin>>a;
if(a<0){ arr[i][j] = INF; } else
arr[i][j] = a;
} }
int u,v,k; cin>>u>>v>>k;
cout<<"Weight of the shortest path is "<<shortestpath(arr,u-1,v-1,k, n)<<endl; return 0; }
